; ----------------------------------------
; LMS Desktop Assistant Build Instructions:
; ----------------------------------------
; * Adapt the version number. This has to happen in 2 places in the project properties:
;   - Application -> Assembly Information
;   - Publish -> Publish version
; * Publish the project with Build -> Publish.
; * Copy the "LMS Desktop Assistant.exe" from the "publish\Application Files\LMS Desktop Assistant_#_#_#_#" folder
;   to the "Resources\installer_files\LMS Desktop Assistant" folder.
; * Copy the files in the "bin\Debug\language\" folder to the "Resources\installer_files\LMS Desktop Assistant\Language" folder.
; * Copy the latest change log files to whatsnew_en.rtf and whatsnew_nl.rtf in the "Resources\installer_files\LMS Desktop Assistant" folder.
; * Add the new changes into the full change log file "changelog.txt" in the "Resources\installer_files\LMS Desktop Assistant" folder.
; * Compile this script.
;
; The resulting installer will be called "LMS Desktop Assistant Installer v#.##.exe", and will be
; located in the "Resources\installer_files" folder.
;
; When updating the program on Sourceforge, don't forget to adapt the version check file on the website!
;
; When making a zipfile of the portable version, don't forget to remove the .svn folders from the zip archive!

; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName           "LMS Desktop Assistant"
#define MyAppExeName        "LMS Desktop Assistant.exe"
#define MyAppVersionFull    GetFileVersion(AddBackslash(SourcePath) + "LMS Desktop Assistant\" + MyAppExeName)

; ********************************************************************************
; * This code formats the version string read from the exe file to "v#.##(.#)"
; * Based on code originally written by Leo Davidson:
; * http://stackoverflow.com/questions/2329979/can-the-setup-filename-be-derived-from-the-executable-file-version-number
; Puts the version in the format vx.xx.x
#define MyAppVersion1       Copy(MyAppVersionFull, 1, Pos(".", MyAppVersionFull) - 1) + "." + StringChange(Copy(MyAppVersionFull, Pos(".", MyAppVersionFull) + 1, RPos(".", MyAppVersionFull) - Pos(".", MyAppVersionFull)-1),".", "") + "." + Copy(MyAppVersionFull, RPos(".", MyAppVersionFull) + 1)
; Trims the ending if it is '.0'
#if Copy(MyAppVersion1, Len(MyAppVersion1)-1, 2) == ".0"
  #define MyAppVersion              Copy(MyAppVersion1, 1, Len(MyAppVersion1)-2)
#else
  #define MyAppVersion              MyAppVersion1
#endif

#define MyAppVerName        MyAppName + " v" + MyAppVersion
#define MyAppCopyrightYear  "2010-2011"
#define MyAppPublisher      "University College Ghent"
#define MyAppURL            "http://hogent.be/"

#define MyAppInstVer        "1.0.1.1"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; This value is taken from the original application ID in Visual Studio.
AppId={{5387a29f-db81-4d6d-b12f-5a13bf47daff}
AppName={#MyAppName}
AppVerName={#MyAppVerName}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
AppMutex=LMSDesktopAssistant
DefaultDirName={pf}\{#MyAppName}
DefaultGroupName={#MyAppName}
AllowNoIcons=yes
LicenseFile=LMS Desktop Assistant\copying.rtf
OutputBaseFilename=LMS Desktop Assistant Installer {#MyAppVersion}
OutputDir=.\
SetupIconFile=lmsda.ico
WizardImageFile=lms_install_inno_big.bmp
WizardImageStretch=no
WizardImageBackColor=$FFFFFF
WizardSmallImageFile=lms_install_inno_small.bmp
Compression=lzma2
SolidCompression=yes
PrivilegesRequired=poweruser
VersionInfoCompany={#MyAppPublisher}
VersionInfoCopyright={#MyAppCopyrightYear}, {#MyAppPublisher}
VersionInfoProductName={#MyAppName}
VersionInfoProductTextVersion=v{#MyAppVersion}
VersionInfoVersion={#MyAppInstVer}
VersionInfoTextVersion=v{#MyAppInstVer}
UninstallDisplayIcon={app}\lmsda_uninstall.ico

[Languages]
Name: eng; MessagesFile: compiler:Default.isl; InfoBeforeFile: LMS Desktop Assistant\whatsnew_en.rtf
Name: ned; MessagesFile: compiler:Languages\Dutch.isl; InfoBeforeFile: LMS Desktop Assistant\whatsnew_nl.rtf

[Tasks]
Name: desktopicon; Description: {cm:CreateDesktopIcon}; GroupDescription: {cm:AdditionalIcons}
; fixed Win7 bug: version has to be "0,6.01" instead of "0,6.1" since that actually means "0,6.10".
Name: quicklaunchicon; Description: {cm:CreateQuickLaunchIcon}; GroupDescription: {cm:AdditionalIcons}; Flags: unchecked; OnlyBelowVersion: 0,6.01

[Files]
Source: LMS Desktop Assistant\LMS Desktop Assistant.exe; DestDir: {app}; Permissions: users-readexec; Flags: ignoreversion
Source: lmsda_uninstall.ico; DestDir: {app}; Permissions: users-readexec; Flags: ignoreversion
Source: LMS Desktop Assistant\SgmlReaderDll.dll; DestDir: {app}; Permissions: users-readexec; Flags: ignoreversion
Source: LMS Desktop Assistant\copying.rtf; DestDir: {app}; Permissions: users-readexec; Flags: ignoreversion
Source: LMS Desktop Assistant\credits.txt; DestDir: {app}; Permissions: users-readexec; Flags: ignoreversion
; change log files
Source: LMS Desktop Assistant\changelog.txt; DestDir: {app}; Flags: ignoreversion;
Source: LMS Desktop Assistant\whatsnew_en.rtf; DestDir: {app}; Flags: ignoreversion; Languages: eng
Source: LMS Desktop Assistant\whatsnew_nl.rtf; DestDir: {app}; Flags: ignoreversion; Languages: ned
; language files
Source: LMS Desktop Assistant\language\English.ini; DestDir: {app}\language; Permissions: users-full; Flags: ignoreversion
Source: LMS Desktop Assistant\language\English_blank.dotx; DestDir: {app}\language; Attribs: readonly; Permissions: users-full; Flags: ignoreversion uninsremovereadonly overwritereadonly
Source: LMS Desktop Assistant\language\English_full.dotx; DestDir: {app}\language; Attribs: readonly; Permissions: users-full; Flags: ignoreversion uninsremovereadonly overwritereadonly
Source: LMS Desktop Assistant\language\Nederlands.ini; DestDir: {app}\language; Permissions: users-full; Flags: ignoreversion
Source: LMS Desktop Assistant\language\Nederlands_blank.dotx; DestDir: {app}\language; Attribs: readonly; Permissions: users-full; Flags: ignoreversion uninsremovereadonly overwritereadonly
Source: LMS Desktop Assistant\language\Nederlands_full.dotx; DestDir: {app}\language; Attribs: readonly; Permissions: users-full; Flags: ignoreversion uninsremovereadonly overwritereadonly

[Dirs]
Name: {app}; Permissions: users-readexec
Name: {app}\language; Permissions: users-readexec
Name: {commonappdata}\{#MyAppName}; Permissions: users-full

[Icons]
Name: {group}\{#MyAppName}; Filename: {app}\{#MyAppExeName}
Name: {group}\Hogeschool Gent; Filename: {#MyAppURL}
Name: {group}\{cm:UninstallProgram,{#MyAppName}}; Filename: {uninstallexe}; IconFilename: {app}\lmsda_uninstall.ico; IconIndex: 0
Name: {group}\{cm:VersionHistory}; Filename: {app}\whatsnew_en.rtf; Languages: eng
Name: {group}\{cm:VersionHistory}; Filename: {app}\whatsnew_nl.rtf; Languages: ned
Name: {commondesktop}\{#MyAppName}; Filename: {app}\{#MyAppExeName}; Tasks: desktopicon
Name: {userappdata}\Microsoft\Internet Explorer\Quick Launch\{#MyAppName}; Filename: {app}\{#MyAppExeName}; Tasks: quicklaunchicon

[Run]
Filename: {app}\LMS Desktop Assistant.exe; WorkingDir: {app}; Flags: postinstall nowait skipifsilent runasoriginaluser; Description: {cm:LaunchProgram,{#MyAppName}}
Filename: {app}\credits.txt; WorkingDir: {app}; Flags: unchecked postinstall nowait shellexec skipifsilent runasoriginaluser; Description: {cm:ShowCredits}

[InstallDelete]
; remove possible traces of a non-admin install: probably not needed, but better to be certain.
Name: {app}\nonadmin.ini; Type: files

[UninstallRun]
Filename: {app}\LMS Desktop Assistant.exe; Parameters: -uninstall; Flags: runascurrentuser

[UninstallDelete]
Name: {commonappdata}\{#MyAppName}; Type: filesandordirs
Name: {app}\settings.xml; Type: files

[CustomMessages]
eng.dotnetmissing=This application requires the Microsoft .Net Framework v3.5, which is not yet installed. Would you like to download it now?
eng.print=&Print
eng.ShowCredits=Show credits && &version history
eng.VersionHistory=Version history

ned.dotnetmissing=Dit programma heeft het Microsoft .Net Framework v3.5 nodig. Dit is momenteel niet geïnstalleerd. Wilt u dit nu downloaden?
ned.print=Af&drukken
ned.ShowCredits=Toon auteurs && &versiegeschiedenis
ned.VersionHistory=Versiegeschiedenis

[Code]

// ********************************************************************************
// * Check for the .Net 3.5 framework by Marc Dürst.
// * Source: http://www.idev.ch/content/view/291/1/
function InitializeSetup(): Boolean;
var
    ErrorCode: Integer;
    netFrameWorkInstalled : Boolean;
    isInstalled: Cardinal;
begin
  result := true;
    // Check for the .Net 3.5 framework
  isInstalled := 0;
  netFrameworkInstalled := RegQueryDWordValue(HKLM, 'SOFTWARE\Microsoft\NET Framework Setup\NDP\v3.5', 'Install', isInstalled);
    // if the key exists, check if it is actually '1'
  if ((netFrameworkInstalled) and (isInstalled <> 1)) then netFrameworkInstalled := false;

  if netFrameworkInstalled = false then
  begin
    if (MsgBox(ExpandConstant('{cm:dotnetmissing}'),
        mbConfirmation, MB_YESNO) = idYes) then
    begin
      ShellExec('open',
      'http://www.microsoft.com/downloads/details.aspx?FamilyID=333325fd-ae52-4e35-b531-508d977d32a6&DisplayLang=en',
      '', '', SW_SHOW, ewNoWait, ErrorCode);
    end;
    result := false;
  end;
end;

// ********************************************************************************
// * Print License code by Sandor Hincs.
// * Source: http://www.vincenzo.net/isxkb/index.php?title=Print_license
type
  HGLOBAL = THandle;
  HDC = DWORD;
  HINST = THandle;
  LPARAM = Longint;

  TDocInfo = record
    cbSize: Integer;
    lpszDocName: PChar;
    lpszOutput: PChar;
    lpszDatatype: PChar;
    fwType: DWORD;
  end;

  TPrintDlg = record
    lStructSize: DWORD;
    hWndOwner: HWND;
    hDevMode: HGLOBAL;
    hDevNames: HGLOBAL;
    hDC: HDC;
    Flags: DWORD;
    nFromPage: Word;
    nToPage: Word;
    nMinPage: Word;
    nMaxPage: Word;
    nCopies: Word;
    hInstance: HINST;
    lCustData: LPARAM;
    lpfnPrintHook: DWORD;
    lpfnSetupHook: DWORD;
    lpPrintTemplateName: PChar;
    lpSetupTemplateName: PChar;
    hPrintTemplate: HGLOBAL;
    hSetupTemplate: HGLOBAL;
  end;

  TCharRange = record
    cpMin: Longint;
    cpMax: LongInt;
  end;

  TFormatRange = record
    hdc: HDC;
    hdcTarget: HDC;
    rc: TRect;
    rcPage: TRect;
    chrg: TCharRange;
  end;

const
  PD_NOSELECTION = $00000004;
  PD_NOPAGENUMS = $00000008;
  PD_RETURNDC = $00000100;
  PD_RETURNDEFAULT = $00000400;
  PD_USEDEVMODECOPIESANDCOLLATE = $00040000;

  HORZRES       = 8;     // Horizontal width in pixels
  VERTRES       = 10;    // Vertical height in pixels
  LOGPIXELSX    = 88;    // Logical pixelsinch in X
  LOGPIXELSY    = 90;    // Logical pixelsinch in Y
  PHYSICALWIDTH   = 110; // Physical Width in device units
  PHYSICALHEIGHT  = 111; // Physical Height in device units
  PHYSICALOFFSETX = 112; // Physical Printable Area x margin
  PHYSICALOFFSETY = 113; // Physical Printable Area y margin

  EM_SETSEL = 177;
  EM_EXGETSEL = 1076;
  EM_FORMATRANGE = 1081;

function GetDeviceCaps(DC: HDC; Index: Integer): Integer;
external 'GetDeviceCaps@gdi32.dll stdcall';

function PrintDlg(var pd: TPrintDlg): Boolean;
external 'PrintDlgA@comdlg32.dll stdcall';

function DeleteDC(DC: HDC): Boolean;
external 'DeleteDC@gdi32.dll stdcall';

function StartDoc(DC: HDC; const p2: TDocInfo): Integer;
external 'StartDocA@gdi32.dll stdcall';

function StartPage(DC: HDC): Integer;
external 'StartPage@gdi32.dll stdcall';

function EndPage(DC: HDC): Integer;
external 'EndPage@gdi32.dll stdcall';

function EndDoc(DC: HDC): Integer;
external 'EndDoc@gdi32.dll stdcall';

function AbortDoc(DC: HDC): Integer;
external 'AbortDoc@gdi32.dll stdcall';

function SendMsgCharRange(const Wnd: HWND; const Msg, WParam: Longint;var
cr: TCharRange ): Longint;
external 'SendMessageA@user32.dll stdcall';

function SendMsgFormatRange(const Wnd: HWND; const Msg, WParam: Longint;var
fr: TFormatRange ): Longint;
external 'SendMessageA@user32.dll stdcall';

function SelectPrinter(var pd: TPrintDlg): boolean;
begin
  pd.lStructSize:=sizeof(pd);
  pd.hWndOwner:=WizardForm.Handle;
  pd.hDevMode:=0;
  pd.hDevNames:=0;
  pd.hDC:=0;
  pd.Flags:=PD_RETURNDC or PD_USEDEVMODECOPIESANDCOLLATE or PD_NOSELECTION;
  pd.nFromPage:=0;
  pd.nToPage:=0;
  pd.nMinPage:=0;
  pd.nMaxPage:=0;
  pd.nCopies:=0;
  pd.hInstance:=0;
  pd.lCustData:=0;
  pd.lpfnPrintHook:=0;
  pd.lpfnSetupHook:=0;
  pd.lpPrintTemplateName:='';
  pd.lpSetupTemplateName:='';
  pd.hPrintTemplate:=0;
  pd.hSetupTemplate:=0;
  Result:=PrintDlg(pd);
end;

function PrintRichEdit(const pd: TPrintDlg; const RichEdit: TRichEditViewer;
const DocName: String;LeftMargin,TopMargin,RightMargin,BottomMargin:
Double): boolean;
var
  di: TDocInfo;
  fr: TFormatRange;
  hPrDC: HDC;
  hReWnd: THandle;
  i: integer;
  nHorzRes,nVertRes,nLogPixelsX,nLogPixelsY: integer;
  nPhysWidth,nPhysHeight,nPhysOffsetX,nPhysOffsetY: integer;
  cpMin: integer;

begin
  hPrDC:=pd.hDC;
  hReWnd:=RichEdit.Handle;

  di.cbSize:=SizeOf(di);
  di.lpszDocName:=PChar(DocName);
  di.lpszOutput:='';
  di.lpszDatatype:='';
  di.fwType:=0;
  if StartDoc(hPrDC,di)<=0 then Exit;

  nLogPixelsX := GetDeviceCaps(hPrDC, LOGPIXELSX);
  nLogPixelsY := GetDeviceCaps(hPrDC, LOGPIXELSY);

  nHorzRes:= GetDeviceCaps(hPrDC, HORZRES)*1440 div nLogPixelsX;
  nVertRes:= GetDeviceCaps(hPrDC, VERTRES)*1440 div nLogPixelsY;
  nPhysWidth:= GetDeviceCaps(hPrDC, PHYSICALWIDTH)*1440 div nLogPixelsX;
  nPhysHeight:= GetDeviceCaps(hPrDC, PHYSICALHEIGHT)*1440 div nLogPixelsY;

  nPhysOffsetX:= GetDeviceCaps(hPrDC, PHYSICALOFFSETX)*1440 div nLogPixelsX;
  nPhysOffsetY:= GetDeviceCaps(hPrDC, PHYSICALOFFSETY)*1440 div nLogPixelsY;

  i:=Round(LeftMargin*1440)-nPhysOffsetX;
  if i<0 then
    i:=0;
  fr.rc.Left:=i;

  i:=Round(TopMargin*1440)-nPhysOffsetY;
  if i<0 then
    i:=0;
  fr.rc.Top:=i;

  i:=nPhysWidth-Round(RightMargin*1440)-nPhysOffsetX;
  if i>nHorzRes then
    i:=nHorzRes;
  fr.rc.Right:=i;

  i:=nPhysHeight-Round(BottomMargin*1440)-nPhysOffsetY;
  if i>nVertRes then
    i:=nVertRes;
  fr.rc.Bottom:=i;

  fr.rcPage:=fr.rc;

  fr.hDC:=hPrDC;
  fr.hdcTarget:=hPrDC;

  // Select the entire contents.
  SendMessage(hReWnd, EM_SETSEL, 0, -1);
  // Get the selection into a CHARRANGE.
  SendMsgCharRange(hReWnd, EM_EXGETSEL, 0, fr.chrg);

  Result:=true;

  // Use GDI to print successive pages.
  while (fr.chrg.cpMin < fr.chrg.cpMax) and Result do begin
    Result := (StartPage(hPrDc) > 0);
    if (not Result) then break;
    cpMin:= SendMsgFormatRange(hReWnd, EM_FORMATRANGE, -1, fr);
    if (cpMin <= fr.chrg.cpMin) then begin
      Result := false;
      break;
    end
    else begin
      fr.chrg.cpMin := cpMin;
      Result := EndPage(hPrDC) > 0;
    end;
  end;
  SendMessage(hReWnd, EM_FORMATRANGE, 0, 0);
  if (Result) then
    EndDoc(hPrDC)
  else
    AbortDoc(hPrDC);
end;

// Print license
procedure PrintButtonClick(Sender: TObject);
var
  pd: TPrintDlg;

begin
  if not SelectPrinter(pd) then Exit;
  try
    PrintRichEdit(pd,WizardForm.LicenseMemo,'License',0.5,0.5,0.5,0.5);
  finally
    DeleteDC(pd.hDC);
  end;
end;

procedure InitializeWizard();
var
     PrintButton: TButton;
begin
     PrintButton := TButton.Create(WizardForm.LicensePage);
     PrintButton.Caption := ExpandConstant('{cm:print}');
     PrintButton.Left := WizardForm.LicenseMemo.Left + WizardForm.LicenseMemo.Width - PrintButton.Width;
     PrintButton.Top := WizardForm.LicenseMemo.Top + WizardForm.LicenseMemo.Height + 16;
     PrintButton.OnClick := @PrintButtonClick;
     PrintButton.Parent := WizardForm.LicenseAcceptedRadio.Parent;
end;
